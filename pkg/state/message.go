// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package state

import (
	"encoding/json"
	"fmt"
	"time"

	"github.com/golang-collections/go-datastructures/queue"
	"github.com/google/simhospital/pkg/message"
	"github.com/google/simhospital/pkg/state/persist"
)

// HL7Message is a stateful object representing HL7 messages being generated by Simulated Hospital.
type HL7Message struct {
	// Name is the message's title for logging purposes.
	Name         string
	Message      *message.HL7Message
	MessageTime  time.Time
	PathwayName  string
	IsHistorical bool
	Event        *Event
}

func (m HL7Message) String() string {
	return fmt.Sprintf("messageName:%v, pathwayName:%v, message:%v, messageTime:%v", m.Name, m.PathwayName, m.Message, m.MessageTime)
}

// Compare compares the current HL7Message with the given Item.
// This method is part of the queue.Item interface and allows the events to be added to the priority queue.
// The items on the priority queue get sorted by their messageTime date. If two items have exactly
// the same messageTime date, they will be ordered by insertion time.
func (m HL7Message) Compare(other queue.Item) int {
	o, ok := other.(HL7Message)
	if !ok {
		log.Fatalf("Incompatible type: trying to compare HL7Message with %v", other)
	}
	if m.MessageTime.Unix() > o.MessageTime.Unix() {
		return 1
	}
	return -1
}

// ID returns this message's ID.
func (m HL7Message) ID() (string, error) {
	return id(fmt.Sprintf("%v", m)), nil
}

// Marshal marshals the HL7Message.
func (m HL7Message) Marshal() ([]byte, error) {
	return json.Marshal(m)
}

// MessageUnmarshaller can be used to unmarshal persisted HL7 messages.
type MessageUnmarshaller struct{}

// Unmarshal unmarshals the given HL7 message.
func (u MessageUnmarshaller) Unmarshal(b []byte) (persist.MarshallableItem, error) {
	var m HL7Message
	err := json.Unmarshal(b, &m)
	return m, err
}
